# TODO:
# 即時アップリンク通知コマンドのバイト配列を生成する
# この関数は、downlinkリクエストのdataclassを利用します
# SensorIDは引数で指定されたsensor_idを使用します
# DeviceIDは引数で指定されたmodule_idを使用します
# CMDは0x00に固定します
# SequenceNoは0xFFFFに固定します



# TODO:
# 即時アップリンク通知要求送信後のレスポンスを評価する
# この関数は、即時アップリンク通知のコマンド送信後に返ってくるDownlinkレスポンスを待ち受け、レスポンスを受信した後にその内容(成功、エラー等）を評価します。
# この関数は、即時アップリンク通知の処理実装の中で利用されます。



# TODO:
# アップリンク通知のセンサー情報を評価する
# この関数は、成功Downlinkレスポンスを受信した後の処理で、引数に指定されたSensorIDとDeviceIDのアップリンク通知を待ち受け、受信したアップリンク通知のdata部がセンサー情報であるかを評価します。
# この関数は、即時アップリンク通知の処理実装の中で利用されます。



# TODO:
# アップリンク通知をデコードする
# この関数は、アップリンク通知のバイト配列を引数として受取り、仕様書のデータレイアウトに従ってデータをデコードします。
# デコードされたデータは、同ディレクトリのdata_layout.pyに定義されたUplink通知のdataclassを使用して各フィールドを設定します。
# データに含まれるUnixTimeのバイト配列は lib/datetime_util.py の関数で整数値に変換する必要があります。
# この関数は、アップリンク通知の処理実装の中で利用されます。



# TODO:
# アップリンク通知のdataclassをJSON形式に変換する
# この関数は、FWバージョン取得の処理実装の中で利用されます。



# TODO:
# 即時アップリンク(get-sensor-data)通知のコマンドの処理を実装する
# この関数は、即時アップリンク通知のコマンドを送信し、結果としてのレスポンスを待ち受けて受信し、結果のレスポンスをJSON形式に変換して標準出力に出力する必要があります。
# シリアル通信機能の実装には lib/async_serial_monitor.py を使用します。
# 主な処理手順:
# 1. シリアル通信(モニタリング)を開始する
# 2. 即時アップリンク通知コマンドのバイト配列を生成する
# 3. 即時アップリンク通知コマンドを送信する
# 4. Downlinkレスポンスを待ち受けて受信する
# 5. Downlinkレスポンスを評価する (エラーの場合は、error_notification.pyの関数を使用してエラー通知をデコードし、JSONを標準出力して処理を終了する）
# 6. 対象のアップリンク通知を待ち受けて受信する
# 7. シリアル通信(モニタリング)を停止する
# 8. アップリンク通知のセンサー情報を評価する
# 9. アップリンク通知をデコードする
# 10. アップリンク通知のdataclassをJSON形式に変換する
# 11. JSON形式のアップリンク通知を標準出力に出力する


